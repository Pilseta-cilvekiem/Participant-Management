/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var contact;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/lib/dg.xrmquery.web.js":
/*!************************************!*\
  !*** ./src/lib/dg.xrmquery.web.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Filter\": () => (/* binding */ Filter),\n/* harmony export */   \"XrmQuery\": () => (/* binding */ XrmQuery)\n/* harmony export */ });\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar XrmQuery;\r\n(function (XrmQuery) {\r\n    /**\r\n     * Instantiates specification of a query that can retrieve a specific record.\r\n     * @param entityPicker Function to select which entity-type should be targeted.\r\n     * @param id GUID of the wanted record.\r\n     */\r\n    function retrieve(entityPicker, id) {\r\n        return XQW.RetrieveRecord.Get(entityPicker, id);\r\n    }\r\n    XrmQuery.retrieve = retrieve;\r\n    // TODO maybe this is a fix for issue #139 on github\r\n    // export function retrieve<ISelect, IExpand, IFixed, FormattedResult, Result>(\r\n    //   entityPicker: (x: WebEntitiesRetrieve) => WebMappingRetrieve<ISelect, IExpand, any, IFixed, Result, FormattedResult>,\r\n    //   id: string) {\r\n    //   id = XQW.stripGUID(id);\r\n    //   return XQW.RetrieveRecord.Get<ISelect, IExpand, IFixed, FormattedResult, Result>(entityPicker, id);\r\n    // }\r\n    /**\r\n     * Instantiates specification of a query that can retrieve multiple records of a certain entity.\r\n     * @param entityPicker Function to select which entity should be targeted.\r\n     */\r\n    function retrieveMultiple(entityPicker) {\r\n        return XQW.RetrieveMultipleRecords.Get(entityPicker);\r\n    }\r\n    XrmQuery.retrieveMultiple = retrieveMultiple;\r\n    /**\r\n     * Instantiates specification of a query that can retrieve a related record of a given record.\r\n     * @param entityPicker Function to select which entity-type the related record should be retrieved from.\r\n     * @param id GUID of the record of which the related record should be retrieved.\r\n     * @param relatedPicker Function to select which navigation property points to the related record.\r\n     */\r\n    function retrieveRelated(entityPicker, id, relatedPicker) {\r\n        return XQW.RetrieveRecord.Related(entityPicker, id, relatedPicker);\r\n    }\r\n    XrmQuery.retrieveRelated = retrieveRelated;\r\n    /**\r\n     * Instantiates specification of a query that can retrieve multiple related records of a given record.\r\n     * @param entityPicker  Function to select which entity-type the related records should be retrieved from.\r\n     * @param id GUID of the record of which the related records should be retrieved.\r\n     * @param relatedPicker Function to select which navigation property points to the related records.\r\n     */\r\n    function retrieveRelatedMultiple(entityPicker, id, relatedPicker) {\r\n        return XQW.RetrieveMultipleRecords.Related(entityPicker, id, relatedPicker);\r\n    }\r\n    XrmQuery.retrieveRelatedMultiple = retrieveRelatedMultiple;\r\n    /**\r\n     * Instantiates a query that can create a record.\r\n     * @param entityPicker Function to select which entity-type should be created.\r\n     * @param record Object of the record to be created.\r\n     */\r\n    function create(entityPicker, record) {\r\n        return new XQW.CreateRecord(entityPicker, record);\r\n    }\r\n    XrmQuery.create = create;\r\n    /**\r\n     * Instantiates a query that can update a specific record.\r\n     * @param entityPicker Function to select which entity-type should be updated.\r\n     * @param id GUID of the record to be updated.\r\n     * @param record Object containing the attributes to be updated.\r\n     */\r\n    function update(entityPicker, id, record) {\r\n        return new XQW.UpdateRecord(entityPicker, id, record);\r\n    }\r\n    XrmQuery.update = update;\r\n    /**\r\n     * Instantiates a query that can associate two specific records with a N:1 relation.\r\n     * @param entityPicker Function to select the entity-type of the source entity.\r\n     * @param id GUID of the source entity.\r\n     * @param entityTargetPicker Function to select the entity-type of the target entity.\r\n     * @param targetId GUID of the target entity.\r\n     * @param relationPicker Function to select which N:1 relation (lookup-field) should be used to associate.\r\n     */\r\n    function associateSingle(entityPicker, id, entityTargetPicker, targetId, relationPicker) {\r\n        return new XQW.AssociateRecordSingle(entityPicker, id, entityTargetPicker, targetId, relationPicker);\r\n    }\r\n    XrmQuery.associateSingle = associateSingle;\r\n    /**\r\n     * Instantiates a query that can associate two specific records with a N:N or 1:N relation.\r\n     * @param entityPicker Function to select the entity-type of the source entity.\r\n     * @param id GUID of the source entity.\r\n     * @param entityTargetPicker Function to select the entity-type of the target entity.\r\n     * @param targetId GUID of the target entity.\r\n     * @param relationPicker Function to select which N:N or 1:N relation should be used to associate.\r\n     */\r\n    function associateCollection(entityPicker, id, entityTargetPicker, targetId, relationPicker) {\r\n        return new XQW.AssociateRecordCollection(entityPicker, id, entityTargetPicker, targetId, relationPicker);\r\n    }\r\n    XrmQuery.associateCollection = associateCollection;\r\n    /**\r\n     * Instantiates a query that can disassociate two specific records with a N:1 relation.\r\n     * @param entityPicker Function to select the entity-type of the source entity.\r\n     * @param id GUID of the source entity.\r\n     * @param relationPicker Function to select which N:1 relation (lookup-field) should be used to disassociate.\r\n     */\r\n    function disassociateSingle(entityPicker, id, relationPicker) {\r\n        return XQW.DisassociateRecord.Single(entityPicker, id, relationPicker);\r\n    }\r\n    XrmQuery.disassociateSingle = disassociateSingle;\r\n    /**\r\n     * Instantiates a query that can disassociate two specific records with a N:N or 1:N relation.\r\n     * @param entityPicker Function to select the entity-type of the source entity.\r\n     * @param id GUID of the source entity.\r\n     * @param relationPicker Function to select which N:N or 1:N relation should be used to disassociate.\r\n     * @param targetId GUID of the target entity.\r\n     */\r\n    function disassociateCollection(entityPicker, id, relationPicker, targetId) {\r\n        return XQW.DisassociateRecord.Collection(entityPicker, id, relationPicker, targetId);\r\n    }\r\n    XrmQuery.disassociateCollection = disassociateCollection;\r\n    /**\r\n     * Instantiates a query that can delete a specific record.\r\n     * @param entityPicker Function to select which entity-type should be deleted.\r\n     * @param id GUID of the record to be updated.\r\n     */\r\n    function deleteRecord(entityPicker, id) {\r\n        return new XQW.DeleteRecord(entityPicker, id);\r\n    }\r\n    XrmQuery.deleteRecord = deleteRecord;\r\n    /**\r\n     * Makes XrmQuery use the given custom url to access the Web API.\r\n     * @param url The url targeting the API. For example: '/api/data/v8.2/'\r\n     */\r\n    function setApiUrl(url) {\r\n        XQW.ApiUrl = url;\r\n    }\r\n    XrmQuery.setApiUrl = setApiUrl;\r\n    /**\r\n     * Makes XrmQuery use the given version to access the Web API.\r\n     * @param v Version to use for the API. For example: '8.2'\r\n     */\r\n    function setApiVersion(v) {\r\n        XQW.ApiUrl = XQW.getDefaultUrl(v);\r\n    }\r\n    XrmQuery.setApiVersion = setApiVersion;\r\n    /**\r\n     * @internal\r\n     */\r\n    function request(type, url, data, successCb, errorCb, preSend, sync) {\r\n        if (errorCb === void 0) { errorCb = function () { }; }\r\n        if (sync === void 0) { sync = false; }\r\n        var req = new XMLHttpRequest();\r\n        req.open(type, url, !sync);\r\n        req.setRequestHeader(\"Accept\", \"application/json\");\r\n        req.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\");\r\n        req.setRequestHeader(\"OData-MaxVersion\", \"4.0\");\r\n        req.setRequestHeader(\"OData-Version\", \"4.0\");\r\n        if (preSend)\r\n            preSend(req);\r\n        req.onreadystatechange = function () {\r\n            if (this.readyState == 4) {\r\n                req.onreadystatechange = null;\r\n                if (this.status == 200 || this.status == 204)\r\n                    successCb(this);\r\n                else\r\n                    errorCb(new Error(this.response));\r\n            }\r\n        };\r\n        req.send(data);\r\n    }\r\n    XrmQuery.request = request;\r\n    /**\r\n     * Sends a request to the Web API with the given parameters.\r\n     * @param type Type of request, i.e. \"GET\", \"POST\", etc\r\n     * @param queryString Query-string to use for the API. For example: 'accounts?$count=true'\r\n     * @param data Object to send with request\r\n     * @param successCb Success callback handler function\r\n     * @param errorCb Error callback handler function\r\n     * @param configure Modify the request before it it sent to the endpoint - like adding headers.\r\n     */\r\n    function sendRequest(type, queryString, data, successCb, errorCb, configure, sync) {\r\n        request(type, encodeSpaces(XQW.getApiUrl() + queryString), data, successCb, errorCb, configure, sync);\r\n    }\r\n    XrmQuery.sendRequest = sendRequest;\r\n    /**\r\n     * Sends a request to the Web API with the given parameters and returns a promise.\r\n     * @param type Type of request, i.e. \"GET\", \"POST\", etc\r\n     * @param queryString Query-string to use for the API. For example: 'accounts?$count=true'\r\n     * @param data Object to send with request\r\n     * @param configure Modify the request before it it sent to the endpoint - like adding headers.\r\n     */\r\n    function promiseRequest(type, queryString, data, configure) {\r\n        return XQW.promisifyCallback(function (success, error) { return sendRequest(type, queryString, data, success, error, configure); });\r\n    }\r\n    XrmQuery.promiseRequest = promiseRequest;\r\n    function encodeSpaces(str) {\r\n        return str.replace(/ /g, \"%20\");\r\n    }\r\n})(XrmQuery || (XrmQuery = {}));\r\nvar Filter;\r\n(function (Filter) {\r\n    function equals(v1, v2) {\r\n        return comp(v1, \"eq\", v2);\r\n    }\r\n    Filter.equals = equals;\r\n    function notEquals(v1, v2) {\r\n        return comp(v1, \"ne\", v2);\r\n    }\r\n    Filter.notEquals = notEquals;\r\n    function greaterThan(v1, v2) {\r\n        return comp(v1, \"gt\", v2);\r\n    }\r\n    Filter.greaterThan = greaterThan;\r\n    function greaterThanOrEqual(v1, v2) {\r\n        return comp(v1, \"ge\", v2);\r\n    }\r\n    Filter.greaterThanOrEqual = greaterThanOrEqual;\r\n    function lessThan(v1, v2) {\r\n        return comp(v1, \"lt\", v2);\r\n    }\r\n    Filter.lessThan = lessThan;\r\n    function lessThanOrEqual(v1, v2) {\r\n        return comp(v1, \"le\", v2);\r\n    }\r\n    Filter.lessThanOrEqual = lessThanOrEqual;\r\n    function and(f1, f2) {\r\n        return biFilter(f1, \"and\", f2);\r\n    }\r\n    Filter.and = and;\r\n    function or(f1, f2) {\r\n        return biFilter(f1, \"or\", f2);\r\n    }\r\n    Filter.or = or;\r\n    function not(f1) {\r\n        return (\"not \" + f1);\r\n    }\r\n    Filter.not = not;\r\n    function ands(fs) {\r\n        return nestedFilter(fs, \"and\");\r\n    }\r\n    Filter.ands = ands;\r\n    function ors(fs) {\r\n        return nestedFilter(fs, \"or\");\r\n    }\r\n    Filter.ors = ors;\r\n    function startsWith(val, prefix) {\r\n        return dataFunc(\"startswith\", val, prefix);\r\n    }\r\n    Filter.startsWith = startsWith;\r\n    function contains(val, needle) {\r\n        return dataFunc(\"contains\", val, needle);\r\n    }\r\n    Filter.contains = contains;\r\n    function endsWith(val, suffix) {\r\n        return dataFunc(\"endswith\", val, suffix);\r\n    }\r\n    Filter.endsWith = endsWith;\r\n    /**\r\n     * Makes a string into a GUID that can be sent to the OData source\r\n     */\r\n    function makeGuid(id) {\r\n        return XQW.makeTag(XQW.stripGUID(id));\r\n    }\r\n    Filter.makeGuid = makeGuid;\r\n    /**\r\n     * @internal\r\n     */\r\n    function getVal(v) {\r\n        if (v == null)\r\n            return \"null\";\r\n        if (typeof v === \"string\")\r\n            return \"'\" + encodeSpecialCharacters(v) + \"'\";\r\n        if (v instanceof Date)\r\n            return encodeSpecialCharacters(v.toISOString());\r\n        return encodeSpecialCharacters(v.toString());\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function comp(val1, op, val2) {\r\n        return (getVal(val1) + \" \" + op + \" \" + getVal(val2));\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function dataFunc(funcName, val1, val2) {\r\n        return (funcName + \"(\" + getVal(val1) + \", \" + getVal(val2) + \")\");\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function biFilter(f1, conj, f2) {\r\n        return (\"(\" + f1 + \" \" + conj + \" \" + f2 + \")\");\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function nestedFilter(fs, conj) {\r\n        var last = fs.pop();\r\n        if (last === undefined) {\r\n            return (\"\");\r\n        }\r\n        return fs.reduceRight(function (acc, c) { return biFilter(c, conj, acc); }, last);\r\n    }\r\n    /**\r\n     * @internal\r\n     * // TODO could this be fix to password problem by adding &qout instead of \"''\" below?\r\n     */\r\n    function encodeSpecialCharacters(queryString) {\r\n        return encodeURI(queryString)\r\n            .replace(/'/g, \"''\")\r\n            .replace(/\\+/g, \"%2B\")\r\n            .replace(/\\//g, \"%2F\")\r\n            .replace(/\\?/g, \"%3F\")\r\n            .replace(/#/g, \"%23\")\r\n            .replace(/&/g, \"%26\");\r\n    }\r\n})(Filter || (Filter = {}));\r\nvar XQW;\r\n(function (XQW) {\r\n    var FORMATTED_VALUE_ID = \"OData.Community.Display.V1.FormattedValue\";\r\n    var FORMATTED_VALUE_SUFFIX = \"@\" + FORMATTED_VALUE_ID;\r\n    var FORMATTED_VALUES_HEADER = { type: \"Prefer\", value: \"odata.include-annotations=\\\"\" + FORMATTED_VALUE_ID + \"\\\"\" };\r\n    var LOOKUP_LOGICALNAME_ID = \"Microsoft.Dynamics.CRM.lookuplogicalname\";\r\n    var LOOKUP_LOGICALNAME_SUFFIX = \"@\" + LOOKUP_LOGICALNAME_ID;\r\n    var LOOKUP_NAVIGATIONPROPERTY_ID = \"Microsoft.Dynamics.CRM.associatednavigationproperty\";\r\n    var LOOKUP_NAVIGATIONPROPERTY_SUFFIX = \"@\" + LOOKUP_NAVIGATIONPROPERTY_ID;\r\n    var INCLUDE_ANNOTATIONS_HEADER = { type: \"Prefer\", value: \"odata.include-annotations=\\\"*\\\"\" };\r\n    var BIND_ID = \"_bind$\";\r\n    var ID_ID = \"_id$\";\r\n    var GUID_ENDING = \"_guid\";\r\n    var FORMATTED_ENDING = \"_formatted\";\r\n    var LOOKUP_LOGICALNAME_ENDING = \"_lookuplogicalname\";\r\n    var LOOKUP_NAVIGATIONPROPERTY_ENDING = \"_navigationproperty\";\r\n    var NEXT_LINK_ID = \"@odata.nextLink\";\r\n    var MaxPageSizeHeader = function (size) { return ({ type: \"Prefer\", value: \"odata.maxpagesize=\" + size }); };\r\n    function makeTag(name) {\r\n        return { __str: name, toString: function () { return this.__str; } };\r\n    }\r\n    XQW.makeTag = makeTag;\r\n    function endsWith(str, suffix) {\r\n        return str.substr(-suffix.length) == suffix;\r\n    }\r\n    function beginsWith(str, prefix) {\r\n        return str.substr(0, prefix.length) == prefix;\r\n    }\r\n    var datePattern = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;\r\n    function reviver(name, value) {\r\n        if (datePattern.test(value))\r\n            return new Date(value);\r\n        var newName = name;\r\n        var formatted = endsWith(newName, FORMATTED_VALUE_SUFFIX);\r\n        var lookupLogicalName = endsWith(newName, LOOKUP_LOGICALNAME_SUFFIX);\r\n        var lookupNavProperty = endsWith(newName, LOOKUP_NAVIGATIONPROPERTY_SUFFIX);\r\n        if (formatted)\r\n            newName = newName.substr(0, newName.length - FORMATTED_VALUE_SUFFIX.length);\r\n        else if (lookupLogicalName)\r\n            newName = newName.substr(0, newName.length - LOOKUP_LOGICALNAME_SUFFIX.length);\r\n        else if (lookupNavProperty)\r\n            newName = newName.substr(0, newName.length - LOOKUP_NAVIGATIONPROPERTY_SUFFIX.length);\r\n        if (beginsWith(newName, \"_\") && endsWith(newName, \"_value\")) {\r\n            newName = newName.substr(1, newName.length - 7);\r\n            if (formatted)\r\n                newName += FORMATTED_ENDING;\r\n            else if (lookupLogicalName)\r\n                newName += LOOKUP_LOGICALNAME_ENDING;\r\n            else if (lookupNavProperty)\r\n                newName += LOOKUP_NAVIGATIONPROPERTY_ENDING;\r\n            else\r\n                newName += GUID_ENDING;\r\n        }\r\n        else {\r\n            if (formatted)\r\n                newName += FORMATTED_ENDING;\r\n        }\r\n        if (newName != name) {\r\n            this[newName] = value;\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n    /* A bit slower (but nicer) implementation using RegEx */\r\n    //const pattern = /^(_)?(.+?)(_value)?(@OData\\.Community\\.Display\\.V1\\.FormattedValue)?$/;\r\n    //function reviver(name: string, value) {\r\n    //  if (datePattern.test(value)) return new Date(value);\r\n    //  let m = pattern.exec(name);\r\n    //  if (!m) return value;\r\n    //  else if (m[4]) { this[m[2] + \"_formatted\"] = value; return; }\r\n    //  else if (m[1] && m[3]) { this[m[2] + \"_guid\"] = value; return; }\r\n    //  else return value;\r\n    //}\r\n    function stripGUID(guid) {\r\n        if (startsWith(\"{\", guid) && endsWith(guid, \"}\"))\r\n            return guid.substring(1, guid.length - 1);\r\n        else\r\n            return guid;\r\n    }\r\n    XQW.stripGUID = stripGUID;\r\n    function parseRetrievedData(req) {\r\n        return JSON.parse(req.response, reviver);\r\n    }\r\n    function isStringArray(arr) {\r\n        return arr.length > 0 && typeof arr[0] === \"string\";\r\n    }\r\n    function promisifyCallback(callbackFunc) {\r\n        if (!Promise)\r\n            throw new Error(\"Promises are not natively supported in this browser. Add a polyfill to use it.\");\r\n        return new Promise(function (resolve, reject) {\r\n            callbackFunc(resolve, reject);\r\n        });\r\n    }\r\n    XQW.promisifyCallback = promisifyCallback;\r\n    var addHeadersToRequestObject = function (headers) { return function (req) {\r\n        headers.forEach(function (header) { return req.setRequestHeader(header.type, header.value); });\r\n    }; };\r\n    var LinkHelper = /** @class */ (function () {\r\n        function LinkHelper(toReturn, successCallback, errorCallback) {\r\n            var _this = this;\r\n            this.toReturn = toReturn;\r\n            this.successCallback = successCallback;\r\n            this.errorCallback = errorCallback;\r\n            this.missingCallbacks = 0;\r\n            this.isDoneSending = false;\r\n            this.isDoingWork = false;\r\n            this.callbackReceived = function () {\r\n                _this.missingCallbacks--;\r\n                if (_this.allSent && _this.missingCallbacks == 0) {\r\n                    _this.successCallback(_this.toReturn);\r\n                }\r\n            };\r\n        }\r\n        LinkHelper.prototype.followLink = function (linkUrl, expandKeys, additionalHeaders, valPlacer) {\r\n            var _this = this;\r\n            this.performingCallback();\r\n            XrmQuery.request(\"GET\", linkUrl, null, function (req) {\r\n                var resp = parseRetrievedData(req);\r\n                PageLinkHelper.followLinks(resp, expandKeys, additionalHeaders, function (vals) {\r\n                    valPlacer(vals);\r\n                    _this.callbackReceived();\r\n                }, _this.errorCallback);\r\n            }, function (err) {\r\n                _this.callbackReceived();\r\n                _this.errorCallback(err);\r\n            }, addHeadersToRequestObject(additionalHeaders));\r\n        };\r\n        LinkHelper.prototype.populateRecord = function (rec, expandKeys, additionalHeaders) {\r\n            this.performingCallback();\r\n            EntityLinkHelper.followLinks(rec, expandKeys, additionalHeaders, this.callbackReceived, this.errorCallback);\r\n        };\r\n        LinkHelper.prototype.allSent = function () {\r\n            if (!this.isDoingWork)\r\n                return this.successCallback(this.toReturn);\r\n            this.isDoneSending = true;\r\n        };\r\n        LinkHelper.prototype.performingCallback = function () {\r\n            this.missingCallbacks++;\r\n            this.isDoingWork = true;\r\n        };\r\n        return LinkHelper;\r\n    }());\r\n    var EntityLinkHelper = /** @class */ (function (_super) {\r\n        __extends(EntityLinkHelper, _super);\r\n        function EntityLinkHelper(rec, expandKeys, additionalHeaders, successCallback, errorCallback) {\r\n            var _this = _super.call(this, rec, successCallback, errorCallback) || this;\r\n            expandKeys.forEach(function (exp) {\r\n                var linkUrl = rec[exp.linkKey];\r\n                if (linkUrl) {\r\n                    delete rec[exp.linkKey];\r\n                    _this.followLink(linkUrl, [], additionalHeaders, function (vals) {\r\n                        rec[exp.arrKey] = rec[exp.arrKey].concat(vals);\r\n                    });\r\n                }\r\n            });\r\n            _this.allSent();\r\n            return _this;\r\n        }\r\n        EntityLinkHelper.followLinks = function (rec, expandKeys, additionalHeaders, successCallback, errorCallback) {\r\n            if (expandKeys.length == 0)\r\n                return successCallback(rec);\r\n            if (isStringArray(expandKeys)) {\r\n                expandKeys = expandKeys.map(function (k) { return ({ arrKey: k, linkKey: k + NEXT_LINK_ID }); });\r\n            }\r\n            return new EntityLinkHelper(rec, expandKeys, additionalHeaders, successCallback, errorCallback);\r\n        };\r\n        return EntityLinkHelper;\r\n    }(LinkHelper));\r\n    /**\r\n     * Helper class to expand on all @odata.nextLink, both pages and on entities retrieved\r\n     */\r\n    var PageLinkHelper = /** @class */ (function (_super) {\r\n        __extends(PageLinkHelper, _super);\r\n        function PageLinkHelper(obj, expandKeys, additionalHeaders, successCallback, errorCallback) {\r\n            var _this = _super.call(this, obj.value, successCallback, errorCallback) || this;\r\n            var nextPage = obj[\"@odata.nextLink\"];\r\n            if (nextPage) {\r\n                _this.followLink(nextPage, expandKeys, additionalHeaders, function (vals) {\r\n                    _this.toReturn = _this.toReturn.concat(vals);\r\n                });\r\n            }\r\n            if (expandKeys.length > 0) {\r\n                obj.value.forEach(function (r) { return _this.populateRecord(r, expandKeys, additionalHeaders); });\r\n            }\r\n            _this.allSent();\r\n            return _this;\r\n        }\r\n        PageLinkHelper.followLinks = function (obj, expandKeys, additionalHeaders, successCallback, errorCallback) {\r\n            if (!obj[\"@odata.nextLink\"] && (obj.value.length == 0 || expandKeys.length == 0))\r\n                return successCallback(obj.value);\r\n            if (expandKeys.length == 0) {\r\n                return new PageLinkHelper(obj, [], additionalHeaders, successCallback, errorCallback);\r\n            }\r\n            if (isStringArray(expandKeys)) {\r\n                expandKeys = expandKeys.map(function (k) { return ({ arrKey: k, linkKey: k + NEXT_LINK_ID }); });\r\n            }\r\n            if (obj.value.length == 0) {\r\n                return new PageLinkHelper(obj, expandKeys, additionalHeaders, successCallback, errorCallback);\r\n            }\r\n            else {\r\n                // Trim expand keys down to the ones that may have nextLinks\r\n                var firstRec_1 = obj.value[0];\r\n                var toKeep = expandKeys.filter(function (exp) { return firstRec_1[exp.linkKey]; });\r\n                return new PageLinkHelper(obj, toKeep, additionalHeaders, successCallback, errorCallback);\r\n            }\r\n        };\r\n        return PageLinkHelper;\r\n    }(LinkHelper));\r\n    var Query = /** @class */ (function () {\r\n        function Query(requestType) {\r\n            this.requestType = requestType;\r\n            this.additionalHeaders = [];\r\n            this.getObjectToSend = function () { return null; };\r\n        }\r\n        Query.prototype.promise = function () {\r\n            return promisifyCallback(this.execute.bind(this));\r\n        };\r\n        Query.prototype.execute = function (successCallback, errorCallback) {\r\n            if (errorCallback === void 0) { errorCallback = function () { }; }\r\n            this.executeRaw(successCallback, errorCallback, true, false);\r\n        };\r\n        Query.prototype.executeSync = function () {\r\n            var ret = Error(\"Undefined behavior\");\r\n            this.executeRaw(function (x) { ret = x; }, function (err) { ret = err; }, true, true);\r\n            return ret;\r\n        };\r\n        Query.prototype.executeRaw = function (successCallback, errorCallback, parseResult, sync) {\r\n            var _this = this;\r\n            if (errorCallback === void 0) { errorCallback = function () { }; }\r\n            if (parseResult === void 0) { parseResult = false; }\r\n            if (sync === void 0) { sync = false; }\r\n            var successHandler = function (req) { return (parseResult ? _this.handleResponse(req, successCallback, errorCallback) : successCallback(req)); };\r\n            return XrmQuery.sendRequest(this.requestType, this.getQueryString(), this.getObjectToSend(), successHandler, errorCallback, addHeadersToRequestObject(this.additionalHeaders), sync);\r\n        };\r\n        return Query;\r\n    }());\r\n    XQW.Query = Query;\r\n    var RetrieveMultipleRecords = /** @class */ (function (_super) {\r\n        __extends(RetrieveMultipleRecords, _super);\r\n        function RetrieveMultipleRecords(entitySetName, id, relatedNav) {\r\n            var _this = _super.call(this, \"GET\") || this;\r\n            _this.entitySetName = entitySetName;\r\n            _this.id = id;\r\n            _this.relatedNav = relatedNav;\r\n            /**\r\n             * @internal\r\n             */\r\n            _this.specialQuery = undefined;\r\n            /**\r\n             * @internal\r\n             */\r\n            _this.selects = [];\r\n            /**\r\n             * @internal\r\n             */\r\n            _this.expands = [];\r\n            /**\r\n             * @internal\r\n             */\r\n            _this.expandKeys = [];\r\n            /**\r\n             * @internal\r\n             */\r\n            _this.ordering = [];\r\n            /**\r\n             * @internal\r\n             */\r\n            _this.skipAmount = null;\r\n            /**\r\n             * @internal\r\n             */\r\n            _this.topAmount = null;\r\n            _this.id = id !== undefined ? stripGUID(id) : id;\r\n            return _this;\r\n        }\r\n        RetrieveMultipleRecords.Get = function (entityPicker) {\r\n            return new RetrieveMultipleRecords(taggedExec(entityPicker).toString());\r\n        };\r\n        RetrieveMultipleRecords.Related = function (entityPicker, id, relatedPicker) {\r\n            return new RetrieveMultipleRecords(taggedExec(entityPicker).toString(), id, taggedExec(relatedPicker).toString());\r\n        };\r\n        RetrieveMultipleRecords.prototype.handleResponse = function (req, successCallback, errorCallback) {\r\n            PageLinkHelper.followLinks(parseRetrievedData(req), this.expandKeys, this.additionalHeaders, successCallback, errorCallback);\r\n        };\r\n        RetrieveMultipleRecords.prototype.getFirst = function (successCallback, errorCallback) {\r\n            this.top(1);\r\n            this.execute(function (res) { return successCallback(res && res.length > 0 ? res[0] : null); }, errorCallback);\r\n        };\r\n        RetrieveMultipleRecords.prototype.promiseFirst = function () {\r\n            return promisifyCallback(this.getFirst.bind(this));\r\n        };\r\n        RetrieveMultipleRecords.prototype.getQueryString = function () {\r\n            var prefix = this.entitySetName;\r\n            if (this.id && this.relatedNav) {\r\n                prefix += \"(\" + this.id + \")/\" + this.relatedNav;\r\n            }\r\n            if (this.specialQuery)\r\n                return prefix + this.specialQuery;\r\n            var options = [];\r\n            if (!this.explicitQuery) {\r\n                this.explicitQuery = {};\r\n            }\r\n            this.addOption(options, \"select\", this.selects);\r\n            this.addOption(options, \"expand\", this.expands);\r\n            this.addOption(options, \"filter\", this.filters);\r\n            this.addOption(options, \"orderby\", this.ordering);\r\n            this.addOption(options, \"skip\", this.skipAmount);\r\n            this.addOption(options, \"top\", this.topAmount);\r\n            return prefix + (options.length > 0 ? \"?\" + options.join(\"&\") : \"\");\r\n        };\r\n        RetrieveMultipleRecords.prototype.addOption = function (options, name, values) {\r\n            var explicit = this.explicitQuery[name];\r\n            var urlName = \"$\" + name + \"=\";\r\n            if (explicit) {\r\n                options.push(urlName + explicit);\r\n            }\r\n            else if (values != null && values != undefined) {\r\n                if (Array.isArray(values)) {\r\n                    if (values.length > 0) {\r\n                        options.push(urlName + values.join(\",\"));\r\n                    }\r\n                }\r\n                else {\r\n                    options.push(urlName + values);\r\n                }\r\n            }\r\n        };\r\n        RetrieveMultipleRecords.prototype.select = function (vars) {\r\n            this.selects = parseSelects(vars);\r\n            return this;\r\n        };\r\n        RetrieveMultipleRecords.prototype.selectMore = function (vars) {\r\n            this.selects = this.selects.concat(parseSelects(vars));\r\n            return this;\r\n        };\r\n        RetrieveMultipleRecords.prototype.explicit = function (query) {\r\n            this.explicitQuery = query;\r\n            return this;\r\n        };\r\n        RetrieveMultipleRecords.prototype.expand = function (exps, selectVarFunc) {\r\n            var expand = taggedExec(exps).toString();\r\n            this.expandKeys.push(expand);\r\n            var options = [];\r\n            if (selectVarFunc)\r\n                options.push(\"$select=\" + parseSelects(selectVarFunc));\r\n            this.expands.push(expand + (options.length > 0 ? \"(\" + options.join(\";\") + \")\" : \"\"));\r\n            return this;\r\n        };\r\n        RetrieveMultipleRecords.prototype.filter = function (filter) {\r\n            this.filters = parseWithTransform(filter);\r\n            return this;\r\n        };\r\n        RetrieveMultipleRecords.prototype.orFilter = function (filter) {\r\n            if (this.filters)\r\n                this.filters = Filter.or(this.filters, parseWithTransform(filter));\r\n            else\r\n                this.filter(filter);\r\n            return this;\r\n        };\r\n        RetrieveMultipleRecords.prototype.andFilter = function (filter) {\r\n            if (this.filters)\r\n                this.filters = Filter.and(this.filters, parseWithTransform(filter));\r\n            else\r\n                this.filter(filter);\r\n            return this;\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        RetrieveMultipleRecords.prototype.order = function (varFunc, by) {\r\n            this.ordering.push(parseWithTransform(varFunc) + \" \" + by);\r\n            return this;\r\n        };\r\n        RetrieveMultipleRecords.prototype.orderAsc = function (vars) {\r\n            return this.order(vars, \"asc\");\r\n        };\r\n        RetrieveMultipleRecords.prototype.orderDesc = function (vars) {\r\n            return this.order(vars, \"desc\");\r\n        };\r\n        RetrieveMultipleRecords.prototype.skip = function (amount) {\r\n            this.skipAmount = amount;\r\n            return this;\r\n        };\r\n        RetrieveMultipleRecords.prototype.top = function (amount) {\r\n            this.topAmount = amount;\r\n            return this;\r\n        };\r\n        RetrieveMultipleRecords.prototype.maxPageSize = function (size) {\r\n            this.additionalHeaders.push(MaxPageSizeHeader(size));\r\n            return this;\r\n        };\r\n        /**\r\n         * Sets a header that lets you retrieve formatted values as well. Should be used after using select and expand of attributes.\r\n         */\r\n        RetrieveMultipleRecords.prototype.includeFormattedValues = function () {\r\n            this.additionalHeaders.push(FORMATTED_VALUES_HEADER);\r\n            return this;\r\n        };\r\n        /**\r\n         * Sets a header that lets you retrieve formatted values and lookup properties as well. Should be used after using select and expand of attributes.\r\n         */\r\n        RetrieveMultipleRecords.prototype.includeFormattedValuesAndLookupProperties = function () {\r\n            this.additionalHeaders.push(INCLUDE_ANNOTATIONS_HEADER);\r\n            return this;\r\n        };\r\n        /**\r\n         * Sets up the query to filter the entity using the provided FetchXML\r\n         * @param xml The query in FetchXML format\r\n         */\r\n        RetrieveMultipleRecords.prototype.useFetchXml = function (xml) {\r\n            this.specialQuery = \"?fetchXml=\" + encodeURIComponent(xml);\r\n            return this;\r\n        };\r\n        RetrieveMultipleRecords.prototype.usePredefinedQuery = function (type, guid) {\r\n            this.specialQuery = \"?\" + type + \"=\" + guid;\r\n            return this;\r\n        };\r\n        return RetrieveMultipleRecords;\r\n    }(Query));\r\n    XQW.RetrieveMultipleRecords = RetrieveMultipleRecords;\r\n    var RetrieveRecord = /** @class */ (function (_super) {\r\n        __extends(RetrieveRecord, _super);\r\n        function RetrieveRecord(entitySetName, id, relatedNav) {\r\n            var _this = _super.call(this, \"GET\") || this;\r\n            _this.entitySetName = entitySetName;\r\n            _this.id = id;\r\n            _this.relatedNav = relatedNav;\r\n            /**\r\n             * @internal\r\n             */\r\n            _this.selects = [];\r\n            /**\r\n             * @internal\r\n             */\r\n            _this.expands = [];\r\n            /**\r\n             * @internal\r\n             */\r\n            _this.expandKeys = [];\r\n            _this.id = stripGUID(id);\r\n            return _this;\r\n        }\r\n        RetrieveRecord.Related = function (entityPicker, id, relatedPicker) {\r\n            return new RetrieveRecord(taggedExec(entityPicker).toString(), id, taggedExec(relatedPicker).toString());\r\n        };\r\n        RetrieveRecord.Get = function (entityPicker, id) {\r\n            return new RetrieveRecord(taggedExec(entityPicker).toString(), id);\r\n        };\r\n        RetrieveRecord.prototype.handleResponse = function (req, successCallback, errorCallback) {\r\n            EntityLinkHelper.followLinks(parseRetrievedData(req), this.expandKeys, this.additionalHeaders, successCallback, errorCallback);\r\n        };\r\n        RetrieveRecord.prototype.select = function (varFunc) {\r\n            this.selects = parseSelects(varFunc);\r\n            return this;\r\n        };\r\n        RetrieveRecord.prototype.selectMore = function (varFunc) {\r\n            this.selects = this.selects.concat(parseSelects(varFunc));\r\n            return this;\r\n        };\r\n        RetrieveRecord.prototype.expand = function (exps, selectVarFunc, optArgs) {\r\n            var expand = taggedExec(exps).toString();\r\n            this.expandKeys.push(expand);\r\n            var options = [];\r\n            if (selectVarFunc)\r\n                options.push(\"$select=\" + parseSelects(selectVarFunc));\r\n            if (optArgs) {\r\n                if (optArgs.top)\r\n                    options.push(\"$top=\" + optArgs.top);\r\n                if (optArgs.orderBy)\r\n                    options.push(\"$orderby=\" + parseWithTransform(optArgs.orderBy) + \" \" + (optArgs.sortOrder != 2 /* Descending */ ? \"asc\" : \"desc\"));\r\n                if (optArgs.filter)\r\n                    options.push(\"$filter=\" + parseWithTransform(optArgs.filter));\r\n            }\r\n            this.expands.push(expand + (options.length > 0 ? \"(\" + options.join(\";\") + \")\" : \"\"));\r\n            return this;\r\n        };\r\n        RetrieveRecord.prototype.getQueryString = function () {\r\n            var prefix = this.entitySetName + \"(\" + this.id + \")\";\r\n            var options = [];\r\n            if (this.selects.length > 0)\r\n                options.push(\"$select=\" + this.selects.join(\",\"));\r\n            if (this.expands.length > 0)\r\n                options.push(\"$expand=\" + this.expands.join(\",\"));\r\n            if (this.relatedNav) {\r\n                prefix += \"/\" + this.relatedNav;\r\n            }\r\n            return prefix + (options.length > 0 ? \"?\" + options.join(\"&\") : \"\");\r\n        };\r\n        /**\r\n         * Sets a header that lets you retrieve formatted values as well. Should be used after using select and expand of attributes.\r\n         */\r\n        RetrieveRecord.prototype.includeFormattedValues = function () {\r\n            this.additionalHeaders.push(FORMATTED_VALUES_HEADER);\r\n            return this;\r\n        };\r\n        /**\r\n         * Sets a header that lets you retrieve formatted values and lookup properties as well. Should be used after using select and expand of attributes.\r\n         */\r\n        RetrieveRecord.prototype.includeFormattedValuesAndLookupProperties = function () {\r\n            this.additionalHeaders.push(INCLUDE_ANNOTATIONS_HEADER);\r\n            return this;\r\n        };\r\n        return RetrieveRecord;\r\n    }(Query));\r\n    XQW.RetrieveRecord = RetrieveRecord;\r\n    /**\r\n     * Contains information about a Create query\r\n     */\r\n    var CreateRecord = /** @class */ (function (_super) {\r\n        __extends(CreateRecord, _super);\r\n        function CreateRecord(entityPicker, record) {\r\n            var _this = _super.call(this, \"POST\") || this;\r\n            _this.record = record;\r\n            _this.getObjectToSend = function () { return JSON.stringify(transformObject(_this.record)); };\r\n            _this.entitySetName = taggedExec(entityPicker).toString();\r\n            return _this;\r\n        }\r\n        CreateRecord.prototype.handleResponse = function (req, successCallback, errorCallback) {\r\n            var header = req.getResponseHeader(\"OData-EntityId\");\r\n            if (header)\r\n                successCallback(header.substr(-37, 36));\r\n            else\r\n                errorCallback(new Error(\"No valid OData-EntityId found in header.\"));\r\n        };\r\n        CreateRecord.prototype.setData = function (record) {\r\n            this.record = record;\r\n            return this;\r\n        };\r\n        CreateRecord.prototype.getQueryString = function () {\r\n            return this.entitySetName;\r\n        };\r\n        return CreateRecord;\r\n    }(Query));\r\n    XQW.CreateRecord = CreateRecord;\r\n    /**\r\n     * Contains information about a Delete query\r\n     */\r\n    var DeleteRecord = /** @class */ (function (_super) {\r\n        __extends(DeleteRecord, _super);\r\n        function DeleteRecord(entityPicker, id) {\r\n            var _this = _super.call(this, \"DELETE\") || this;\r\n            _this.id = id;\r\n            _this.id = id !== undefined ? stripGUID(id) : id;\r\n            _this.entitySetName = taggedExec(entityPicker).toString();\r\n            return _this;\r\n        }\r\n        DeleteRecord.prototype.handleResponse = function (req, successCallback) {\r\n            successCallback();\r\n        };\r\n        DeleteRecord.prototype.setId = function (id) {\r\n            this.id = stripGUID(id);\r\n            return this;\r\n        };\r\n        DeleteRecord.prototype.getQueryString = function () {\r\n            return this.entitySetName + \"(\" + this.id + \")\";\r\n        };\r\n        return DeleteRecord;\r\n    }(Query));\r\n    XQW.DeleteRecord = DeleteRecord;\r\n    /**\r\n     * Contains information about an UpdateRecord query\r\n     */\r\n    var UpdateRecord = /** @class */ (function (_super) {\r\n        __extends(UpdateRecord, _super);\r\n        function UpdateRecord(entityPicker, id, record) {\r\n            var _this = _super.call(this, \"PATCH\") || this;\r\n            _this.id = id;\r\n            _this.record = record;\r\n            _this.getObjectToSend = function () { return JSON.stringify(transformObject(_this.record)); };\r\n            _this.id = id !== undefined ? stripGUID(id) : id;\r\n            _this.entitySetName = taggedExec(entityPicker).toString();\r\n            return _this;\r\n        }\r\n        UpdateRecord.prototype.handleResponse = function (req, successCallback) {\r\n            successCallback();\r\n        };\r\n        UpdateRecord.prototype.setData = function (id, record) {\r\n            this.id = stripGUID(id);\r\n            this.record = record;\r\n            return this;\r\n        };\r\n        UpdateRecord.prototype.getQueryString = function () {\r\n            return this.entitySetName + \"(\" + this.id + \")\";\r\n        };\r\n        return UpdateRecord;\r\n    }(Query));\r\n    XQW.UpdateRecord = UpdateRecord;\r\n    /**\r\n     * Contains information about an AssociateRecord query for single-valued properties\r\n     */\r\n    var AssociateRecordSingle = /** @class */ (function (_super) {\r\n        __extends(AssociateRecordSingle, _super);\r\n        function AssociateRecordSingle(entityPicker, id, entityTargetPicker, targetid, relationPicker) {\r\n            var _this = _super.call(this, \"PUT\") || this;\r\n            _this.id = id;\r\n            _this.getObjectToSend = function () { return JSON.stringify(transformObject(_this.record)); };\r\n            _this.entitySetName = taggedExec(entityPicker).toString();\r\n            _this.id = id !== undefined ? stripGUID(id) : id;\r\n            _this.entitySetNameTarget = taggedExec(entityTargetPicker).toString();\r\n            _this.targetId = targetid !== undefined ? stripGUID(targetid) : targetid;\r\n            _this.relation = taggedExec(relationPicker).toString();\r\n            _this.record = {};\r\n            _this.record[\"_id$\" + _this.entitySetNameTarget] = _this.targetId;\r\n            return _this;\r\n        }\r\n        AssociateRecordSingle.prototype.handleResponse = function (req, successCallback) {\r\n            successCallback();\r\n        };\r\n        AssociateRecordSingle.prototype.setData = function (id, record) {\r\n            this.id = stripGUID(id);\r\n            this.record = record;\r\n            return this;\r\n        };\r\n        AssociateRecordSingle.prototype.getQueryString = function () {\r\n            return this.entitySetName + \"(\" + this.id + \")/\" + this.relation + \"/$ref\";\r\n        };\r\n        return AssociateRecordSingle;\r\n    }(Query));\r\n    XQW.AssociateRecordSingle = AssociateRecordSingle;\r\n    /**\r\n     * Contains information about an AssociateRecord query for collection-valued properties\r\n     */\r\n    var AssociateRecordCollection = /** @class */ (function (_super) {\r\n        __extends(AssociateRecordCollection, _super);\r\n        function AssociateRecordCollection(entityPicker, id, entityTargetPicker, targetid, relationPicker) {\r\n            var _this = _super.call(this, \"POST\") || this;\r\n            _this.id = id;\r\n            _this.getObjectToSend = function () { return JSON.stringify(transformObject(_this.record)); };\r\n            _this.entitySetName = taggedExec(entityPicker).toString();\r\n            _this.id = id !== undefined ? stripGUID(id) : id;\r\n            _this.entitySetNameTarget = taggedExec(entityTargetPicker).toString();\r\n            _this.targetId = targetid !== undefined ? stripGUID(targetid) : targetid;\r\n            _this.relation = taggedExec(relationPicker).toString();\r\n            _this.record = {};\r\n            _this.record[\"_id$\" + _this.entitySetNameTarget] = _this.targetId;\r\n            return _this;\r\n        }\r\n        AssociateRecordCollection.prototype.handleResponse = function (req, successCallback) {\r\n            successCallback();\r\n        };\r\n        AssociateRecordCollection.prototype.setData = function (id, record) {\r\n            this.id = stripGUID(id);\r\n            this.record = record;\r\n            return this;\r\n        };\r\n        AssociateRecordCollection.prototype.getQueryString = function () {\r\n            return this.entitySetName + \"(\" + this.id + \")/\" + this.relation + \"/$ref\";\r\n        };\r\n        return AssociateRecordCollection;\r\n    }(Query));\r\n    XQW.AssociateRecordCollection = AssociateRecordCollection;\r\n    /**\r\n     * Contains information about a Disassociate query\r\n     */\r\n    var DisassociateRecord = /** @class */ (function (_super) {\r\n        __extends(DisassociateRecord, _super);\r\n        function DisassociateRecord(entityName, id, rel, targetid) {\r\n            var _this = _super.call(this, \"DELETE\") || this;\r\n            _this.id = id;\r\n            _this.targetid = targetid;\r\n            _this.entitySetName = entityName;\r\n            _this.id = id !== undefined ? stripGUID(id) : id;\r\n            _this.relation = rel;\r\n            _this.targetId = targetid !== undefined ? stripGUID(targetid) : targetid;\r\n            return _this;\r\n        }\r\n        DisassociateRecord.Single = function (entityPicker, id, relationPicker) {\r\n            return new DisassociateRecord(taggedExec(entityPicker).toString(), id, taggedExec(relationPicker).toString());\r\n        };\r\n        DisassociateRecord.Collection = function (entityPicker, id, relationPicker, targetId) {\r\n            return new DisassociateRecord(taggedExec(entityPicker).toString(), id, taggedExec(relationPicker).toString(), targetId);\r\n        };\r\n        DisassociateRecord.prototype.handleResponse = function (req, successCallback) {\r\n            successCallback();\r\n        };\r\n        DisassociateRecord.prototype.setId = function (id) {\r\n            this.id = stripGUID(id);\r\n            return this;\r\n        };\r\n        DisassociateRecord.prototype.getQueryString = function () {\r\n            if (this.targetId == undefined) {\r\n                // single-valued\r\n                return this.entitySetName + \"(\" + this.id + \")/\" + this.relation + \"/$ref\";\r\n            }\r\n            else {\r\n                // collection-valued\r\n                return this.entitySetName + \"(\" + this.id + \")/\" + this.relation + \"(\" + this.targetId + \")/$ref\";\r\n            }\r\n        };\r\n        return DisassociateRecord;\r\n    }(Query));\r\n    XQW.DisassociateRecord = DisassociateRecord;\r\n    /**\r\n     * @internal\r\n     */\r\n    function startsWith(needle, haystack) {\r\n        return haystack.lastIndexOf(needle, 0) === 0;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function taggedExec(f, transformer) {\r\n        return f(tagMatches(f, transformer));\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    // 1: \"function \" or \"function\" is optional and should be ignored\r\n    // 2: Open Paren is optional\r\n    // 3: Get arguement name\r\n    // 4: close Paren is optional\r\n    // 5: either \"=> {\" or \"=>\" or \"{\" is required but ignored\r\n    // 6: Get Body of function which may or may not end with a \"}\"\r\n    //           (      1       )(2)(      3      )(4)(         5          )(        6       )\r\n    var fPatt = /(?:function)*\\s*\\(?([a-zA-Z0-9_]+)\\)?(?:\\s?=>\\s?\\{?|\\s?\\{)+([\\s\\S]*[^\\}])\\}?$/m;\r\n    /**\r\n     * @internal\r\n     */\r\n    function objRegex(oName) {\r\n        return new RegExp(\"\\\\b\" + oName + \"\\\\.([a-zA-Z_$][0-9a-zA-Z_$]*)(\\\\.([a-zA-Z_$][0-9a-zA-Z_$]*))?\", \"g\");\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function analyzeFunc(f) {\r\n        var m = f.toString().match(fPatt);\r\n        if (!m)\r\n            throw new Error(\"XrmQuery: Unable to properly parse function: \" + f.toString());\r\n        return { arg: m[1], body: m[2] };\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function tagMatches(f, transformer) {\r\n        var funcInfo = analyzeFunc(f);\r\n        var regex = objRegex(funcInfo.arg);\r\n        var transformerFunc = transformer ? transformer : function (x) { return x; };\r\n        var obj = {};\r\n        var match;\r\n        while ((match = regex.exec(funcInfo.body)) != null) {\r\n            if (!obj[match[1]]) {\r\n                obj[match[1]] = XQW.makeTag(transformerFunc(match[1]));\r\n            }\r\n            if (match[3]) {\r\n                obj[match[1]][match[3]] = XQW.makeTag(match[1] + \"/\" + transformerFunc(match[3]));\r\n            }\r\n        }\r\n        return obj;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    XQW.ApiUrl = null;\r\n    var DefaultApiVersion = \"9.2\";\r\n    function getDefaultUrl(v) {\r\n        return getClientUrl() + (\"/api/data/v\" + v + \"/\");\r\n    }\r\n    XQW.getDefaultUrl = getDefaultUrl;\r\n    function getApiUrl() {\r\n        if (XQW.ApiUrl === null)\r\n            XQW.ApiUrl = getDefaultUrl(DefaultApiVersion);\r\n        return XQW.ApiUrl;\r\n    }\r\n    XQW.getApiUrl = getApiUrl;\r\n    /**\r\n     * @internal\r\n     */\r\n    function getClientUrl() {\r\n        var url = getClientUrlFromGlobalContext();\r\n        if (url !== undefined)\r\n            return url;\r\n        url = getClientUrlFromUtility();\r\n        if (url !== undefined)\r\n            return url;\r\n        url = getClientUrlFromXrmPage();\r\n        if (url !== undefined)\r\n            return url;\r\n        throw new Error(\"Context is not available.\");\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function getClientUrlFromGlobalContext() {\r\n        try {\r\n            if (GetGlobalContext && GetGlobalContext().getClientUrl) {\r\n                return GetGlobalContext().getClientUrl();\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function getClientUrlFromUtility() {\r\n        try {\r\n            if (Xrm && Xrm.Utility && Xrm.Utility.getGlobalContext) {\r\n                return Xrm.Utility.getGlobalContext().getClientUrl();\r\n            }\r\n        }\r\n        catch (e) { }\r\n        try {\r\n            if (window && window.parent && window.parent.window) {\r\n                var w = (window.parent.window);\r\n                if (w && w.Xrm && w.Xrm.Utility && w.Xrm.Utility.getGlobalContext) {\r\n                    return w.Xrm.Utility.getGlobalContext().getClientUrl();\r\n                }\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function getClientUrlFromXrmPage() {\r\n        try {\r\n            if (Xrm && Xrm.Page && Xrm.Page.context) {\r\n                return Xrm.Page.context.getClientUrl();\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Converts a XrmQuery select/filter name to the Web API format\r\n     * @param name\r\n     */\r\n    function xrmQueryToCrm(name) {\r\n        // check if the attribute name ends with '_guid'\r\n        var endsWithUnderscoreGuid = name.match(/_guid$/);\r\n        if (!endsWithUnderscoreGuid)\r\n            return name;\r\n        return \"_\" + name.substr(0, endsWithUnderscoreGuid.index) + \"_value\";\r\n    }\r\n    /**\r\n     * Helper function to perform tagged execution and mapping to array of selects\r\n     * @internal\r\n     */\r\n    function parseSelects(selectFunc) {\r\n        return parseWithTransform(selectFunc).map(function (x) { return x.toString(); });\r\n    }\r\n    /**\r\n     * Parses a given function and transforms any XrmQuery-specific values to it's corresponding CRM format\r\n     * @param filterFunc\r\n     */\r\n    function parseWithTransform(filterFunc) {\r\n        return taggedExec(filterFunc, xrmQueryToCrm);\r\n    }\r\n    /**\r\n     * Transforms an object XrmQuery format to a CRM format\r\n     * @param obj\r\n     */\r\n    function transformObject(obj) {\r\n        if (obj instanceof Date) {\r\n            return obj;\r\n        }\r\n        else if (typeof obj === \"string\" && startsWith(\"{\", obj) && endsWith(obj, \"}\")) {\r\n            return obj.substring(1, obj.length - 1);\r\n        }\r\n        else if (obj instanceof Array) {\r\n            var arr = [];\r\n            obj.forEach(function (v, idx) { return (arr[idx] = transformObject(v)); });\r\n            return arr;\r\n        }\r\n        else if (obj instanceof Object) {\r\n            var newObj = {};\r\n            Object.keys(obj).forEach(function (key) { return parseAttribute(key, transformObject(obj[key]), newObj); });\r\n            return newObj;\r\n        }\r\n        else {\r\n            return obj;\r\n        }\r\n    }\r\n    /**\r\n     * Parses attributes from XrmQuery format to CRM format\r\n     * @param key\r\n     * @param value\r\n     */\r\n    function parseAttribute(key, val, newObj) {\r\n        if (key.indexOf(BIND_ID) >= 0) {\r\n            var lookupIdx = key.indexOf(BIND_ID);\r\n            if (lookupIdx >= 0) {\r\n                var setName = key.substr(lookupIdx + BIND_ID.length);\r\n                newObj[key.substr(0, lookupIdx) + \"@odata.bind\"] = \"/\" + setName + \"(\" + val + \")\";\r\n            }\r\n        }\r\n        else if (key.indexOf(ID_ID) >= 0) {\r\n            var lookupIdx = key.indexOf(ID_ID);\r\n            if (lookupIdx >= 0) {\r\n                var setName = key.substr(lookupIdx + ID_ID.length);\r\n                var url = getDefaultUrl(DefaultApiVersion);\r\n                newObj[key.substr(0, lookupIdx) + \"@odata.id\"] = \"\" + url + setName + \"(\" + val + \")\";\r\n            }\r\n        }\r\n        else {\r\n            newObj[key] = val;\r\n        }\r\n    }\r\n})(XQW || (XQW = {}));\r\nvar Filter;\r\n(function (Filter) {\r\n    var GUID_ENDING = \"_value\";\r\n    var GUID_START = \"_\";\r\n    function $in(val, listVal) {\r\n        return queryFunc(\"In\", val, listVal);\r\n    }\r\n    Filter.$in = $in;\r\n    function notIn(val, listVal) {\r\n        return queryFunc(\"NotIn\", val, listVal);\r\n    }\r\n    Filter.notIn = notIn;\r\n    function under(v1, v2) {\r\n        return queryFunc(\"Under\", v1, v2);\r\n    }\r\n    Filter.under = under;\r\n    function underOrEqual(v1, v2) {\r\n        return queryFunc(\"UnderOrEqual\", v1, v2);\r\n    }\r\n    Filter.underOrEqual = underOrEqual;\r\n    function notUnder(v1, v2) {\r\n        return queryFunc(\"NotUnder\", v1, v2);\r\n    }\r\n    Filter.notUnder = notUnder;\r\n    function above(v1, v2) {\r\n        return queryFunc(\"Above\", v1, v2);\r\n    }\r\n    Filter.above = above;\r\n    function equalUserId(prop) {\r\n        return queryFunc(\"EqualUserId\", prop);\r\n    }\r\n    Filter.equalUserId = equalUserId;\r\n    function notEqualUserId(prop) {\r\n        return queryFunc(\"NotEqualUserId\", prop);\r\n    }\r\n    Filter.notEqualUserId = notEqualUserId;\r\n    function equalBusinessId(prop) {\r\n        return queryFunc(\"EqualBusinessId\", prop);\r\n    }\r\n    Filter.equalBusinessId = equalBusinessId;\r\n    function notEqualBusinessId(prop) {\r\n        return queryFunc(\"NotEqualBusinessId\", prop);\r\n    }\r\n    Filter.notEqualBusinessId = notEqualBusinessId;\r\n    function queryFunc(funcName, val1, val2) {\r\n        if (val2 !== undefined) {\r\n            return (\"Microsoft.Dynamics.CRM.\" + funcName + \"(PropertyName='\" + parsePropertyName(getVal(val1)) + \"',PropertyValues=\" + getVal(val2) + \")\");\r\n        }\r\n        else {\r\n            return (\"Microsoft.Dynamics.CRM.\" + funcName + \"(PropertyName='\" + parsePropertyName(getVal(val1)) + \"')\");\r\n        }\r\n    }\r\n    function parsePropertyName(name) {\r\n        var idxStart = name.indexOf(GUID_START);\r\n        var idxEnd = name.indexOf(GUID_ENDING);\r\n        if (idxStart === -1 || idxEnd === -1)\r\n            return name;\r\n        return \"\" + name.substr(idxStart + 1, idxEnd - 1);\r\n    }\r\n    function getVal(v) {\r\n        if (v === null)\r\n            return \"null\";\r\n        if (typeof v === \"string\")\r\n            return \"'\" + encodeSpecialCharacters(v) + \"'\";\r\n        if (v instanceof Date)\r\n            return encodeSpecialCharacters(v.toISOString());\r\n        if (v instanceof Array)\r\n            return \"[\" + v.map(getVal).join(\",\") + \"]\";\r\n        return encodeSpecialCharacters(v.toString());\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    function encodeSpecialCharacters(queryString) {\r\n        return encodeURI(queryString)\r\n            .replace(/'/g, \"''\")\r\n            .replace(/\\+/g, \"%2B\")\r\n            .replace(/\\//g, \"%2F\")\r\n            .replace(/\\?/g, \"%3F\")\r\n            .replace(/#/g, \"%23\")\r\n            .replace(/&/g, \"%26\");\r\n    }\r\n})(Filter || (Filter = {}));\r\n\n/*** EXPORTS FROM exports-loader ***/\n\n\n\n//# sourceURL=webpack://%5Bname%5D/./src/lib/dg.xrmquery.web.js?");

/***/ }),

/***/ "./src/contact.js":
/*!************************!*\
  !*** ./src/contact.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sendDebtReminderFromForm\": () => (/* binding */ sendDebtReminderFromForm),\n/* harmony export */   \"sendDebtReminderFromGrid\": () => (/* binding */ sendDebtReminderFromGrid)\n/* harmony export */ });\n/* harmony import */ var _lib_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/common */ \"./src/lib/common.js\");\n/* provided dependency */ var XrmQuery = __webpack_require__(/*! dg.xrmquery.web */ \"./src/lib/dg.xrmquery.web.js\")[\"XrmQuery\"];\n\r\nasync function sendDebtReminderFromForm(form) {\r\n    await (0,_lib_common__WEBPACK_IMPORTED_MODULE_0__.performActionFromForm)(form, sendDebtReminder, \"SendingDebtReminderToContact\");\r\n}\r\nasync function sendDebtReminderFromGrid(grid, selectedIds) {\r\n    await (0,_lib_common__WEBPACK_IMPORTED_MODULE_0__.performActionFromGrid)(grid, selectedIds, sendDebtReminder, async (i) => await (0,_lib_common__WEBPACK_IMPORTED_MODULE_0__.getLocalizedText)(\"SendingDebtRemindersToContacts\", i, selectedIds.length));\r\n}\r\nasync function sendDebtReminder(id) {\r\n    await XrmQuery.promiseRequest(\"POST\", `contacts(${(0,_lib_common__WEBPACK_IMPORTED_MODULE_0__.formatGuid)(id)})/Microsoft.Dynamics.CRM.pc_SendDebtReminderToContact`, null);\r\n}\r\n//# sourceMappingURL=contact.js.map\n\n//# sourceURL=webpack://%5Bname%5D/./src/contact.js?");

/***/ }),

/***/ "./src/lib/common.js":
/*!***************************!*\
  !*** ./src/lib/common.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"formatGuid\": () => (/* binding */ formatGuid),\n/* harmony export */   \"getLocalizedText\": () => (/* binding */ getLocalizedText),\n/* harmony export */   \"performActionFromForm\": () => (/* binding */ performActionFromForm),\n/* harmony export */   \"performActionFromGrid\": () => (/* binding */ performActionFromGrid),\n/* harmony export */   \"showError\": () => (/* binding */ showError),\n/* harmony export */   \"sleep\": () => (/* binding */ sleep)\n/* harmony export */ });\n/* provided dependency */ var XrmQuery = __webpack_require__(/*! dg.xrmquery.web */ \"./src/lib/dg.xrmquery.web.js\")[\"XrmQuery\"];\n/* provided dependency */ var Filter = __webpack_require__(/*! dg.xrmquery.web */ \"./src/lib/dg.xrmquery.web.js\")[\"Filter\"];\nlet resource;\r\nasync function showError(error) {\r\n    const message = getErrorMessage(error);\r\n    await Xrm.Navigation.openAlertDialog({ text: message });\r\n}\r\nfunction getErrorMessage(error) {\r\n    try {\r\n        const errorMessage = JSON.parse(error.message);\r\n        return errorMessage.error.message;\r\n    }\r\n    catch (_a) {\r\n    }\r\n    return error;\r\n}\r\nfunction formatGuid(guid) {\r\n    const formattedGuid = guid.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    return formattedGuid;\r\n}\r\nfunction sleep(timeout) {\r\n    return new Promise(resolve => setTimeout(resolve, timeout));\r\n}\r\nasync function performActionFromForm(form, action, messageKey) {\r\n    try {\r\n        const id = form.data.entity.getId();\r\n        try {\r\n            const message = await getLocalizedText(messageKey);\r\n            Xrm.Utility.showProgressIndicator(message);\r\n            await action(id);\r\n        }\r\n        finally {\r\n            Xrm.Utility.closeProgressIndicator();\r\n        }\r\n        await form.data.refresh();\r\n    }\r\n    catch (error) {\r\n        await showError(error);\r\n    }\r\n}\r\nasync function performActionFromGrid(grid, selectedIds, action, message) {\r\n    try {\r\n        try {\r\n            for (let i = 0; i < selectedIds.length; ++i) {\r\n                const id = selectedIds[i];\r\n                Xrm.Utility.showProgressIndicator(await message(i + 1));\r\n                await action(id);\r\n            }\r\n        }\r\n        finally {\r\n            Xrm.Utility.closeProgressIndicator();\r\n        }\r\n        grid.refresh();\r\n    }\r\n    catch (error) {\r\n        await showError(error);\r\n    }\r\n}\r\nasync function getLocalizedText(key, ...args) {\r\n    var _a;\r\n    if (!resource) {\r\n        const context = Xrm.Utility.getGlobalContext();\r\n        const resxWebResourceName = `pc_/Resource.${context.userSettings.languageId}.resx`;\r\n        const resxWebResource = await XrmQuery.retrieveMultiple(x => x.webresourceset)\r\n            .filter(wr => Filter.equals(wr.name, resxWebResourceName))\r\n            .select(wr => [wr.contentjson])\r\n            .promiseFirst();\r\n        resource = JSON.parse(resxWebResource.contentjson);\r\n    }\r\n    const formatString = (_a = resource[key]) !== null && _a !== void 0 ? _a : key;\r\n    const formattedString = format(formatString, args);\r\n    return formattedString;\r\n}\r\nfunction format(format, args) {\r\n    const formattedString = format.replace(/{(\\d+)}/g, (_, position) => args[position]);\r\n    return formattedString;\r\n}\r\n//# sourceMappingURL=common.js.map\n\n//# sourceURL=webpack://%5Bname%5D/./src/lib/common.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/contact.js");
/******/ 	contact = __webpack_exports__;
/******/ 	
/******/ })()
;